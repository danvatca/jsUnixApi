/**
 * Copyright (C) 2012, Dan Vatca <dan.vatca@gmail.com>
 * All rights reserved.
 *  Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <v8.h>
#include <node.h>

#include <list>
#include <string>

#include "datalink.hpp"

using namespace node;
using namespace v8;

class NetConfig: ObjectWrap
{
	private:
		std::list<std::string> interfaces;

	public:
		static Persistent<FunctionTemplate> s_ct;

		static void Init(Handle<Object> target) {
			HandleScope scope;

			Local<FunctionTemplate> t = FunctionTemplate::New(New);

			s_ct = Persistent<FunctionTemplate>::New(t);
			s_ct->InstanceTemplate()->SetInternalFieldCount(1);
			s_ct->SetClassName(String::NewSymbol("NetConfig"));

			NODE_SET_PROTOTYPE_METHOD(s_ct, "getAllInterfaces", getAllInterfaces);

			target->Set(String::NewSymbol("NetConfig"), s_ct->GetFunction());
		}

		NetConfig() { }
		~NetConfig() { }

		static Handle<Value> New(const Arguments& args) {
			HandleScope scope;
			NetConfig* hw = new NetConfig();
			hw->Wrap(args.This());
			return args.This();
		}

		static Handle<Value> getAllInterfaces(const Arguments& args) {
			HandleScope scope;
			NetConfig* netconf = ObjectWrap::Unwrap<NetConfig>(args.This());
			int i = 0;
			std::list<std::string>::const_iterator it;
			get_interfaces_list(&netconf->interfaces);
			Local<Array> result = Array::New();
			for (it=netconf->interfaces.begin(); it!=netconf->interfaces.end(); it++) {
				result->Set(Number::New(i++), String::New((*it).c_str()));
			}
			return scope.Close(result);
		}
};

Persistent<FunctionTemplate> NetConfig::s_ct;

extern "C" {
	static void init (Handle<Object> target) {
		NetConfig::Init(target);
	}
	NODE_MODULE(netconfig, init);
}
