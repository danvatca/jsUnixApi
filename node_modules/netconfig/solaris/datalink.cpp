/**
 * Copyright (C) 2012, Dan Vatca <dan.vatca@gmail.com>
 * All rights reserved.
 *  Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "datalink.hpp"

#include <string>
#include <list>

#include <libdllink.h>

dladm_handle_t g_handle;

int dladm_init() {
	dladm_status_t dlstat;
	char errmsg[DLADM_STRSIZE];

	dlstat = dladm_open(&this->g_handle);
	if (dlstat != DLADM_STATUS_OK) {
		fprintf(stderr, "dladm_open: %s\n", dladm_status2str(dlstat, errmsg));
		return 1;
	}
	return 0;
}

int dladm_finish() {
	dladm_status_t dlstat;
	char errmsg[DLADM_STRSIZE];

	dladm_close(this->g_handle);
	return 0;
}

static int dladm_callback(dladm_handle_t dh, datalink_id_t linkid, void *obj) {
	dladm_status_t		status;
	char			link[MAXLINKNAMELEN];
	datalink_class_t	dl_class;
	uint32_t		flags;
	std::list<std::string> *interfaces = (std::list<std::string> *)(obj);

	if ((status = dladm_datalink_id2info(g_handle, linkid, &flags, &dl_class,
	    NULL, link, sizeof (link))) != DLADM_STATUS_OK) {
		return (status);
	}

	interfaces->push_back(link);

	return (DLADM_WALK_CONTINUE);
}

void get_interfaces_list(std::list<std::string> *interfaces) {
	dladm_init();
	interfaces->clear();

	uint32_t flags = DLADM_OPT_ACTIVE;
	(void) dladm_walk_datalink_id(dladm_callback, g_handle,
	    interfaces, (datalink_class_t) DATALINK_CLASS_ALL, DATALINK_ANY_MEDIATYPE,
	    flags);
	dladm_finish();
	return;
}
